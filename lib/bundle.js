;(function(e,t,n){function i(n,s){if(!t[n]){if(!e[n]){var o=typeof require=="function"&&require;if(!s&&o)return o(n,!0);if(r)return r(n,!0);throw new Error("Cannot find module '"+n+"'")}var u=t[n]={exports:{}};e[n][0].call(u.exports,function(t){var r=e[n][1][t];return i(r?r:t)},u,u.exports)}return t[n].exports}var r=typeof require=="function"&&require;for(var s=0;s<n.length;s++)i(n[s]);return i})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var Glass, WGlass, canvas, cocktail_glass, cocktail_json, cocktail_representation, export_string, w;

  console.log("test");

  cocktail_json = '{"path":"M 419 102 l -152 245 l 0 185 c 0 23.25 101 11.75 106 25","foot":{"x":255,"y":557},"stem":{"x":255,"y":532},"bowl":{"x":255,"y":347},"edge":{"x":255,"y":102},"height_in_mm":150,"spec":{"round_max":"cl","mm_from_top":0},"measure_lines":{},"nr_of_measure_lines":0}';

  canvas = Raphael('test', 500, 500);

  console.log("in");

  Glass = require('./widgets/glass/glass');

  WGlass = require('./widgets/glass/wglass');

  cocktail_glass = new Glass(cocktail_json);

  export_string = cocktail_glass.to_full_json();

  w = window.open('');

  w.document.open('text/plain');

  w.document.write(export_string);

  cocktail_representation = new WGlass(canvas, 1, 1, cocktail_glass);

}).call(this);

/*
//@ sourceMappingURL=test.map
*/

},{"./widgets/glass/glass":2,"./widgets/glass/wglass":3}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
/*
glass.coffee version 0.1

Modeling different glasses

(c) 2012 Huub de Beer H.T.de.Beer@gmail.com

Long description
*/


(function() {
  var Glass;

  Glass = (function() {
    Glass.TENTH_OF_MM = 10;

    Glass.prototype.to_json = function() {
      var export_object;
      export_object = {
        path: this.path,
        foot: {
          x: this.foot.x,
          y: this.foot.y
        },
        stem: {
          x: this.stem.x,
          y: this.stem.y
        },
        bowl: {
          x: this.bowl.x,
          y: this.bowl.y
        },
        edge: {
          x: this.edge.x,
          y: this.edge.y
        },
        height_in_mm: this.height_in_mm,
        spec: this.spec
      };
      return JSON.stringify(export_object, null, '  ');
    };

    Glass.prototype.to_full_json = function() {
      var export_object;
      export_object = {
        path: this.path,
        foot: {
          x: this.foot.x,
          y: this.foot.y
        },
        stem: {
          x: this.stem.x,
          y: this.stem.y
        },
        bowl: {
          x: this.bowl.x,
          y: this.bowl.y
        },
        bowl_start: this.bowl_start,
        edge: {
          x: this.edge.x,
          y: this.edge.y
        },
        height_in_mm: this.height_in_mm,
        unit: this.unit,
        spec: this.spec,
        vol: this.vol,
        r: this.r,
        speed: this.speed,
        maximum_height: this.maximum_height,
        maximum_volume: this.maximum_volume,
        maximum_speed: this.maximum_speed
      };
      return JSON.stringify(export_object, null, '  ');
    };

    function Glass(path, foot, stem, bowl, edge, height_in_mm, spec) {
      var import_object, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;
      if (spec == null) {
        spec = {
          round_max: "cl",
          mm_from_top: 5
        };
      }
      /*
      pre:
          path is the right hand side of the countour of the glass
        ∧ 0 ≤ foot.y 
        ∧ foot.y ≤ stem.y 
        ∧ stem.y ≤ bowl.y
        ∧ bowl.y < edge.y
        ∧ 0 < height_in_mm
      
      post:
          is_empty
      */

      if (arguments.length === 1) {
        import_object = JSON.parse(path);
        this.path = import_object.path;
        this.foot = import_object.foot;
        this.stem = import_object.stem;
        this.bowl = import_object.bowl;
        this.edge = import_object.edge;
        this.height_in_mm = import_object.height_in_mm;
        this.spec = (_ref = import_object != null ? import_object.spec : void 0) != null ? _ref : {
          round_max: "cl",
          mm_from_top: 5
        };
        this.unit = (_ref1 = import_object != null ? import_object.unit : void 0) != null ? _ref1 : Math.abs(this.edge.y - this.foot.y) / this.height_in_mm;
        this.bowl_start = (_ref2 = import_object != null ? import_object.bowl_start : void 0) != null ? _ref2 : this.height_in_mm - (Math.abs(this.bowl.y - this.edge.y) / this.unit);
        this.r = (_ref3 = import_object != null ? import_object.r : void 0) != null ? _ref3 : [];
        if (!(import_object != null ? import_object.r : void 0)) {
          this.r = this._compute_r(this.path, this.foot, this.height_in_mm, this.unit);
        }
        console.log(this.r);
        this.vol = (_ref4 = import_object != null ? import_object.vol : void 0) != null ? _ref4 : [];
        this.speed = (_ref5 = import_object != null ? import_object.speed : void 0) != null ? _ref5 : [];
        this.maximum_volume = (_ref6 = import_object != null ? import_object.maximum_volume : void 0) != null ? _ref6 : 0;
        this.maximum_height = (_ref7 = import_object != null ? import_object.maximum_height : void 0) != null ? _ref7 : 0;
        this.maximum_speed = (_ref8 = import_object != null ? import_object.maximum_speed : void 0) != null ? _ref8 : 0;
        if (this.maximum_volume === 0 || this.maximum_height === 0 || this.maximum_speed === 0) {
          this._determine_maximum(this.height_in_mm - this.spec.mm_from_top, this.spec.round_max);
        }
      } else {
        this.path = path;
        this.foot = foot;
        this.stem = stem;
        this.bowl = bowl;
        this.edge = edge;
        this.height_in_mm = height_in_mm;
        this.spec = spec;
        this.unit = Math.abs(this.edge.y - this.foot.y) / this.height_in_mm;
        this.bowl_start = this.height_in_mm - (Math.abs(this.bowl.y - this.edge.y) / this.unit);
        this.r = [];
        this.r = this._compute_r(this.path, this.foot, this.height_in_mm, this.unit);
        this.vol = [];
        this.speed = [];
        this.maximum_volume = 0;
        this.maximum_height = 0;
        this.maximum_speed = 0;
        this._determine_maximum(this.height_in_mm - this.spec.mm_from_top, this.spec.round_max);
      }
      this.make_empty();
    }

    Glass.prototype.compute_speed = function() {
      var dh, dvol, h, h_max, v_prev, vol, _results;
      h = 0;
      h_max = this.vol.length - 1;
      while (this.vol[h] === 0) {
        h++;
      }
      this.speed[0] = 0;
      v_prev = 0;
      this.maximum_speed = 0;
      _results = [];
      while (h <= h_max) {
        vol = this.vol[h];
        dh = 0;
        while (h <= h_max && v_prev === vol) {
          h++;
          dh += 0.01;
          vol = this.vol[h];
        }
        dvol = vol - v_prev;
        this.speed[vol] = dh / dvol;
        this.maximum_speed = Math.max(this.maximum_speed, this.speed[vol]);
        v_prev = vol;
        _results.push(h++);
      }
      return _results;
    };

    Glass.prototype.make_empty = function(initial_value) {
      if (initial_value == null) {
        initial_value = 0;
      }
      /*
      Empty this glass 
      
      pre:
          True
      
      post:
          current_height = 0
        ∧ current_volume = 0
      */

      this.current_volume = 0;
      this.current_height = 0;
      this.current_height = this.fill_to_volume(initial_value);
      this.current_height++;
      return this.current_graph = "M0,0";
    };

    Glass.prototype.is_empty = function() {
      /*
      Is this glass empty?
      
      pre:
          True
      
      post:
          True
      
      return:
          current_volume = 0
      */

      return this.current_volume === 0;
    };

    Glass.prototype.is_full = function() {
      /*
      Is this glass full?
      
      pre:
          True
      
      post:
          True
      
      return:
          current_volume = maximum_volume
      */

      return this.current_volume === this.maximum_volume;
    };

    Glass.prototype.fill_to_height = function(height) {
      /*
      Fill this glass up to height and return corresponding volume
      
      pre: 
          height, 0 ≤ height ≤ maximum_height
      
      post:
          current_height = height
        ∧ current_volume = volume_at_height(height)
      
      return:
          volume_at_height(height)
      */

      if (height <= this.maximum_height) {
        this.current_height = height;
      } else {
        this.current_height = this.maximum_height;
      }
      this.current_volume = this.volume_at_height(this.current_height);
      return this.current_volume;
    };

    Glass.prototype.fill_to_volume = function(volume) {
      /*
      Fill this glass up to volume and return the corresponding water level height.
      
      pre:
          volume, 0 ≤ volume ≤ maximum_volume
      
      post:
          current_volume = volume
        ∧ current_height = height_at_volume(volume)
      
      return:
          height_at_volume(volume)
      */

      if (volume <= this.maximum_volume) {
        this.current_volume = volume;
      } else {
        this.current_volume = this.maximum_volume;
      }
      this.current_height = this.height_at_volume(this.current_volume);
      return this.current_height;
    };

    Glass.prototype.speed_at_height = function(height) {
      return this.speed[height * Glass.TENTH_OF_MM];
    };

    Glass.prototype.speed_at_volume = function(vol) {
      var h;
      h = height_at_volume(vol);
      return this.speed[h * Glass.TENTH_OF_MM];
    };

    Glass.prototype.volume_at_height = function(height) {
      /*
      Compute the volume of the water in this glass when it is filled up to
      height. Take in account the shape of the glass: only the bowl of the
      glass can be filled.
      
      pre:
          height: water level height in mm
      
      post:
          volume = (∫h: 0 ≤ h ≤ height: πr(h)^2)
      
      return:
          volume in ml
      */

      var HSTEP, dvol, h;
      HSTEP = 0.01;
      h = Math.ceil(height * Glass.TENTH_OF_MM);
      if (this.vol[h] == null) {
        if (h === 0) {
          this.vol[0] = 0;
          this.speed[0] = 0;
        } else {
          if ((0 <= height && height < this.bowl_start)) {
            this.vol[h] = 0 + this.volume_at_height((h - 1) / Glass.TENTH_OF_MM);
            this.speed[h] = 0;
          } else {
            dvol = Math.PI * Math.pow(this.r[h] / Glass.TENTH_OF_MM, 2) * HSTEP;
            this.vol[h] = dvol + this.volume_at_height((h - 1) / Glass.TENTH_OF_MM);
            this.speed[h] = dvol !== 0 ? HSTEP / dvol : 0;
            this.maximum_speed = Math.max(this.maximum_speed, this.speed[h]);
          }
        }
      }
      return this.vol[h];
    };

    Glass.prototype.height_at_volume = function(volume) {
      /*
      Compute the height of the water level in this glass when there is volume water in it.
      
      pre:
          0 ≤ volume 
      
      post:
          height = (h: 0 ≤ h ≤ total_height: vol[h + 1] > volume ∧ vol[h-1] < volume)
      
      return:
          height in mm
      */

      var height, maxheight;
      height = this.current_height * Glass.TENTH_OF_MM;
      maxheight = this.height_in_mm * Glass.TENTH_OF_MM;
      while (!(this.vol[height] > volume || height >= maxheight)) {
        height++;
      }
      return Math.floor(height / Glass.TENTH_OF_MM);
    };

    Glass.prototype.get_current_graph = function() {
      return this.current_graph = this.graph[Math.ceil(this.current_height * Glass.TENTH_OF_MM)];
    };

    Glass.prototype.create_graph = function(paper, graph, line, x_axis, speed) {
      var EPSILON, add_time, dspeed, dtime, dvol, h, p, path, ptmm, speed_before, speed_step, vollast, x, y;
      if (speed == null) {
        speed = false;
      }
      EPSILON = 0.01;
      switch (x_axis) {
        case 'vol':
          if (speed) {
            ptmm = 1 / 100 / line.y_unit.per_pixel;
            dvol = 0;
            this.graph = [];
            path = "M0,0";
            h = 0;
            while (this.vol[h] === 0) {
              this.graph.push(path);
              h++;
            }
            x = line.min.x;
            y = line.max.y - (this.speed[h] / line.y_unit.per_pixel);
            path = "M" + x + "," + y;
            vollast = 0;
            this.graph.push(path);
            speed_before = this.speed[h];
            while (h < this.vol.length && this.vol[h] < this.maximum_volume) {
              dvol = this.vol[h] - vollast;
              vollast = this.vol[h];
              dspeed = speed_before !== 0 ? this.speed[h] - speed_before : 0;
              speed_before = this.speed[h];
              speed_step = dspeed / line.y_unit.per_pixel * (-1);
              path += "l" + (dvol / line.x_unit.per_pixel) + "," + speed_step;
              this.graph.push(path);
              h++;
            }
            graph.attr({
              path: path
            });
            line.add_point(x, y, graph);
            p = line.find_point_at(x);
            return line.add_freehand_line(p, path);
          } else {
            ptmm = 1 / 100 / line.y_unit.per_pixel;
            dvol = 0;
            this.graph = [];
            path = "M0,0";
            h = 0;
            while (this.vol[h] === 0) {
              this.graph.push(path);
              h++;
            }
            x = line.min.x;
            y = line.max.y - (h / 100 / line.y_unit.per_pixel);
            path = "M" + x + "," + y;
            vollast = 0;
            this.graph.push(path);
            while (h < this.vol.length && this.vol[h] < this.maximum_volume) {
              dvol = this.vol[h] - vollast;
              vollast = this.vol[h];
              path += "l" + (dvol / line.x_unit.per_pixel) + ",-" + ptmm;
              this.graph.push(path);
              h++;
            }
            graph.attr({
              path: path
            });
            line.add_point(x, y, graph);
            p = line.find_point_at(x);
            return line.add_freehand_line(p, path);
          }
          break;
        case 'time':
          ptmm = 1 / 100 / line.y_unit.per_pixel;
          dtime = 0;
          this.graph = [];
          path = "M0,0";
          h = 0;
          while (this.vol[h] === 0) {
            this.graph.push(path);
            h++;
          }
          x = line.min.x;
          y = line.max.y - (h / 100 / line.y_unit.per_pixel);
          path = "M" + x + "," + y;
          vollast = 0;
          add_time = 0;
          this.graph.push(path);
          while (h < this.vol.length && this.vol[h] < this.maximum_volume) {
            dvol = this.vol[h] - vollast;
            vollast = this.vol[h];
            add_time = dvol / speed;
            path += "l" + (add_time / line.x_unit.per_pixel) + ",-" + ptmm;
            this.graph.push(path);
            h++;
          }
          graph.attr({
            path: path
          });
          line.add_point(x, y, graph);
          p = line.find_point_at(x);
          return line.add_freehand_line(p, path);
      }
    };

    Glass.prototype._compute_r = function(path, foot, total_height, unit) {
      /*
      Given a path and the coordinate of the foot on the mid-line of the
      glass, compute the radius of the glass at every height.
      
      pre:
          path: SVG path of contour of the right side of the glass
        ∧ foot: point of the foot or bottom of the glass on the mid line
      
      post:
          (∀ h: 0 ≤ h ≤ total_height: r[h] = radius of glass at height h in mm/10 in mm) 
      
      return:
          r
      */

      var height, length_on_path, point_on_length, r, _i, _ref;
      r = [];
      length_on_path = 0;
      for (height = _i = _ref = total_height * Glass.TENTH_OF_MM; _ref <= 0 ? _i <= 0 : _i >= 0; height = _ref <= 0 ? ++_i : --_i) {
        point_on_length = Raphael.getPointAtLength(path, length_on_path);
        while (Math.abs(foot.y - point_on_length.y) > height * unit / Glass.TENTH_OF_MM) {
          length_on_path++;
          point_on_length = Raphael.getPointAtLength(path, length_on_path);
        }
        r[height] = Math.abs(point_on_length.x - foot.x) / unit;
      }
      return r;
    };

    Glass.prototype._determine_maximum = function(total_height, round_to) {
      var factor, total_volume;
      if (round_to == null) {
        round_to = "cl";
      }
      /*
      Determine the maximum volume and corresponding maximum height of this 
      glass. Round to the first ml, cl, dl, or l below total_height.
      
      pre:
          0 ≤ total_height
        ∧ round_to ∈ {ml, cl, dl, l}
      
      post:
          0 ≤ maximum_height < total_height
        ∧ maximum_volume = volume_at_height(maximum_height)
        ∧ height_at_volume(maximum_volume + 1 round_to) >= total_height
      */

      total_volume = this.volume_at_height(total_height);
      factor = 10;
      switch (round_to) {
        case "ml":
          factor = 1;
          break;
        case "cl":
          factor = 10;
          break;
        case "dl":
          factor = 100;
          break;
        case "l":
          factor = 1000;
      }
      this.maximum_volume = Math.floor(total_volume / factor) * factor;
      this.current_height = 0;
      return this.maximum_height = this.height_at_volume(this.maximum_volume);
    };

    return Glass;

  })();

  module.exports = Glass;

}).call(this);

/*
//@ sourceMappingURL=glass.map
*/

},{}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
/*
*/


(function() {
  var Glass, MeasureLine, WGlass, WMeasureLine, Widget,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Widget = require('../widget');

  Glass = require('./glass');

  MeasureLine = require('./measure_line');

  WMeasureLine = require('./wmeasure_line');

  WGlass = (function(_super) {
    __extends(WGlass, _super);

    function WGlass(canvas, x, y, glass, spec) {
      this.canvas = canvas;
      this.x = x;
      this.y = y;
      this.glass = glass;
      this.spec = spec != null ? spec : {};
      this.stop_manual_diff = __bind(this.stop_manual_diff, this);
      this.hide_longdrink = __bind(this.hide_longdrink, this);
      this.show_longdrink = __bind(this.show_longdrink, this);
      this.start_manual_diff = __bind(this.start_manual_diff, this);
      WGlass.__super__.constructor.call(this, this.canvas, this.x, this.y, this.spec);
      this.points = this._compute_points(this.glass);
      this.lengths = this._compute_lengths_at_heigth();
      this._draw();
      this.place_at(this.x, this.y);
      this.move_handler = null;
      this.graph = null;
    }

    WGlass.prototype.start_manual_diff = function() {
      this.glasspane.mouseover(this.show_longdrink);
      return this.glasspane.mouseout(this.hide_longdrink);
    };

    WGlass.prototype.show_longdrink = function() {
      var _ref;
      this.longdrink.show();
      this.lml.show();
      this.lbl.show();
      this.ll.show();
      this.lf.show();
      this.llp.show();
      this.lrp.show();
      this.move_handler = (_ref = this.move_handler) != null ? _ref : this.move_longdrink(this);
      return this.glasspane.mousemove(this.move_handler);
    };

    WGlass.prototype.hide_longdrink = function() {
      this.longdrink.hide();
      this.lml.hide();
      this.lbl.hide();
      this.ll.hide();
      this.lf.hide();
      this.llp.hide();
      this.lrp.hide();
      this.lgl.hide();
      return this.gp.hide();
    };

    WGlass.prototype.fit_point = function(x, y) {
      var point;
      point = {
        x: x - this.canvas.canvas.parentNode.offsetLeft,
        y: y - this.canvas.canvas.parentNode.offsetTop
      };
      return point;
    };

    WGlass.prototype.set_graph = function(graph) {
      return this.graph = graph;
    };

    WGlass.prototype.del_graph = function() {
      return this.graph = null;
    };

    WGlass.prototype.move_longdrink = function(glassrep) {
      var _this = this;
      return function(e, x, y) {
        var BELOW, OVER_GRAPH_LENGTH, compute_vol, gheight, gpx, gpy, gvol, h, halfvol, halfvolpx, hi, left, length, lglpath, line, p, path, ph, py, r, right, rmm, vol;
        p = glassrep.fit_point(x, y);
        py = p.y - _this.dy;
        ph = glassrep.points.foot.right.y - py;
        h = Math.ceil((ph / glassrep.glass.unit) * Glass.TENTH_OF_MM);
        length = glassrep.lengths[h];
        right = Raphael.getPointAtLength(glassrep.glass.path, length);
        left = right.x - 2 * (right.x - glassrep.glass.edge.x);
        r = (right.x - left) / 2;
        rmm = r / glassrep.glass.unit;
        hi = Math.floor(20 * glassrep.glass.unit);
        compute_vol = function(rmm, h) {
          var hmm;
          hmm = h / glassrep.glass.unit;
          return Math.floor(Math.PI * Math.pow(rmm, 2) * hmm / 1000);
        };
        while ((compute_vol(rmm, hi) % 2) !== 0 && (compute_vol(rmm, hi) % 10) !== 5) {
          hi++;
        }
        vol = compute_vol(rmm, hi);
        BELOW = 10 * glassrep.glass.unit;
        if (_this.spec.diff_graph && _this.graph) {
          OVER_GRAPH_LENGTH = 1000;
          gheight = Math.ceil(ph / glassrep.glass.unit);
          gvol = _this.glass.volume_at_height(gheight);
          line = _this.graph.computer_line;
          gpx = line.min.x + gvol / line.x_unit.per_pixel;
          gpy = line.max.y - (gheight / 10) / line.y_unit.per_pixel;
          halfvol = vol / 2;
          halfvolpx = halfvol / line.x_unit.per_pixel;
          lglpath = "M" + gpx + "," + gpy + "l" + halfvolpx + "," + (-hi + BELOW) + "M" + gpx + "," + gpy + "l-" + halfvolpx + "," + BELOW;
          _this.lgl.attr({
            path: lglpath
          });
          _this.lgl.show().toFront();
          _this.gp.attr({
            cx: gpx,
            cy: gpy
          });
          _this.gp.show().toFront();
        } else {
          _this.lgl.hide();
          _this.gp.hide();
          OVER_GRAPH_LENGTH = 0;
        }
        _this.lf.attr({
          x: left + _this.dx,
          y: right.y + _this.dy,
          width: right.x - left,
          height: BELOW
        });
        path = "M" + right.x + "," + (right.y - hi + BELOW) + "H" + (-_this.dx + 10);
        path += "M" + right.x + "," + (right.y - hi + BELOW) + "h" + OVER_GRAPH_LENGTH;
        _this.lml.attr({
          path: path,
          transform: "t" + _this.dx + "," + _this.dy
        });
        _this.lml.toFront();
        path = "M" + right.x + "," + (right.y + BELOW) + "H" + (-_this.dx + 10);
        path += "M" + right.x + "," + (right.y + BELOW) + "h" + OVER_GRAPH_LENGTH;
        _this.lbl.attr({
          path: path,
          transform: "t" + _this.dx + "," + _this.dy
        });
        _this.lbl.toFront();
        path = "M" + right.x + "," + (right.y + BELOW) + "v-" + (hi + 10) + "M" + right.x + "," + (right.y + BELOW) + "L" + left + "," + (right.y + BELOW) + "v-" + (hi + 10);
        _this.longdrink.attr({
          path: path,
          transform: "t" + _this.dx + "," + _this.dy
        });
        _this.llp.attr({
          cx: left + _this.dx,
          cy: right.y + _this.dy
        });
        _this.lrp.attr({
          cx: right.x + _this.dx,
          cy: right.y + _this.dy
        });
        return _this.ll.attr({
          text: "" + vol + " ml",
          transform: "t" + (left + _this.dx + 10) + "," + (right.y - hi + _this.dy - 10 + BELOW)
        });
      };
    };

    WGlass.prototype.stop_manual_diff = function() {
      this.longdrink.hide();
      this.lgl.hide();
      this.gp.hide();
      this.glasspane.unmousemove(this.move_handler);
      this.glasspane.unmouseover(this.show_longdrink);
      return this.glasspane.unmouseout(this.hide_longdrink);
    };

    WGlass.prototype.fill_to_height = function(height_in_mm) {
      /*
      Update the fill-part to correspond to a water level equal to the height_in_mm.
      */

      var diameter, height, left, length, right;
      diameter = function(length, glass) {
        return Math.abs(Raphael.getPointAtLength(glass.path, length).x - glass.foot.x) * 2;
      };
      height = this.glass.foot.y - (height_in_mm * this.glass.unit);
      if (height < this.glass.bowl.y) {
        this.points.water_level = {};
        this.points.water_level.length = length = this.lengths[height_in_mm * Glass.TENTH_OF_MM];
        this.points.water_level.right = right = Raphael.getPointAtLength(this.glass.path, length);
        this.points.water_level.left = {
          x: right.x - diameter(length, this.glass),
          y: right.y
        };
        right = Raphael.path2curve(Raphael.getSubpath(this.glass.path, this.points.water_level.length, this.points.bowl.length));
        left = this._mirror_path_vertically(right, this.glass.bowl.x);
        return this.water_level.attr({
          path: right + ("H" + this.points.bowl.left.x) + left
        });
      }
    };

    WGlass.prototype._draw = function() {
      var base, bowl, max_ml_representation, max_x, max_y, maxpoint;
      this.paths = this._create_paths();
      base = this.canvas.path(this.paths.base);
      base.attr({
        fill: '#aaa',
        stroke: 'black',
        'stroke-width': 2
      });
      this.widgets.push(base);
      this.water_level = this.canvas.path("M0,0");
      this.water_level.attr({
        fill: '#abf',
        'fill-opacity': 0.4,
        stroke: 'none'
      });
      this.widgets.push(this.water_level);
      bowl = this.canvas.path(this.paths.bowl);
      bowl.attr({
        stroke: 'black',
        'stroke-width': 2
      });
      this.widgets.push(bowl);
      maxpoint = Raphael.getPointAtLength(this.glass.path, this.lengths[this.glass.maximum_height * Glass.TENTH_OF_MM]);
      max_x = maxpoint.x;
      max_y = maxpoint.y;
      this.max_ml = new MeasureLine(this.glass.maximum_volume, this.glass.maximum_height, this.glass, {
        x: max_x,
        y: max_y
      }, 'right', true, false);
      max_ml_representation = new WMeasureLine(this.canvas, max_x, max_y, this.max_ml);
      this.widgets.push(max_ml_representation.widgets);
      this.lf = this.canvas.rect(0, 0, 0, 0);
      this.lf.attr({
        fill: 'orange',
        'fill-opacity': 0.5,
        'stroke': 'none'
      });
      this.lf.hide();
      this.lml = this.canvas.path("M0,0");
      this.lml.attr({
        stroke: 'orange',
        'stroke-opacity': 0.5,
        'stroke-dasharray': '-'
      });
      this.lml.hide();
      this.lbl = this.canvas.path("M0,0");
      this.lbl.attr({
        stroke: 'orange',
        'stroke-opacity': 0.5,
        'stroke-dasharray': '-'
      });
      this.lbl.hide();
      this.longdrink = this.canvas.path("M0,0");
      this.longdrink.attr({
        stroke: 'orange',
        'stroke-width': 3,
        'stroke-opacity': 0.9
      });
      this.longdrink.hide();
      this.lgl = this.canvas.path("M0,0");
      this.lgl.attr({
        stroke: 'orange',
        'stroke-width': 3,
        'stroke-opacity': 0.9
      });
      this.lgl.hide();
      this.gp = this.canvas.circle(0, 0, 2);
      this.gp.attr({
        fill: 'gray'
      });
      this.gp.hide();
      this.ll = this.canvas.text(0, 0, "250 ml");
      this.ll.attr({
        'font-family': 'sans-serif',
        'font-size': '12pt',
        'text-anchor': 'start',
        fill: 'gray'
      });
      this.ll.hide();
      this.llp = this.canvas.circle(0, 0, 2);
      this.llp.attr({
        fill: 'gray'
      });
      this.llp.hide();
      this.lrp = this.canvas.circle(0, 0, 2);
      this.lrp.attr({
        fill: 'gray'
      });
      this.lrp.hide();
      this.glasspane = this.canvas.path(this.paths.bowl);
      this.glasspane.attr({
        fill: 'white',
        'fill-opacity': 0,
        'stroke-width': 5,
        'stroke-opacity': 0
      });
      return this.widgets.push(this.glasspane);
    };

    WGlass.prototype._create_paths = function() {
      /*
      Create the path of the part of this glass
      */

      var left, paths, right;
      paths = {};
      right = Raphael.path2curve(Raphael.getSubpath(this.glass.path, this.points.bowl.length, this.points.foot.length));
      left = this._mirror_path_vertically(right, this.glass.foot.x);
      paths.base = right + ("H" + this.points.foot.left.x) + left;
      right = Raphael.path2curve(Raphael.getSubpath(this.glass.path, this.points.edge.length, this.points.bowl.length));
      left = this._mirror_path_vertically(right, this.glass.foot.x);
      paths.bowl = right + ("H" + this.points.bowl.left.x) + left;
      return paths;
    };

    WGlass.prototype._compute_geometry = function() {
      var base, bowl;
      base = Raphael.pathBBox(this.paths.base);
      bowl = Raphael.pathBBox(this.paths.bowl);
      this.geometry = {};
      this.geometry.top = bowl.y;
      this.geometry.left = Math.min(base.x, bowl.x);
      this.geometry.bottom = base.y2;
      this.geometry.right = Math.max(base.x2, bowl.b2);
      this.geometry.width = Math.max(base.width, bowl.width);
      this.geometry.height = base.height + bowl.height;
      return this.geometry.center = {
        x: (this.geometry.right - this.geometry.left) / 2 + this.geometry.left,
        y: (this.geometry.bottom - this.geometry.top) / 2 + this.geometry.top
      };
    };

    WGlass.prototype._compute_points = function(glass) {
      /*
      Compute points, lengths, and paths between points for the edge, foot, stem, and bowl
      */

      var diameter, length, line, points, right, _i, _len, _ref;
      diameter = function(length) {
        return Math.abs(Raphael.getPointAtLength(glass.path, length).x - glass.foot.x) * 2;
      };
      points = {};
      length = 0;
      _ref = ['edge', 'bowl', 'stem', 'foot'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        points[line] = {};
        points[line].length = length = this._length_at_y(glass.path, glass[line].y, length);
        points[line].right = right = Raphael.getPointAtLength(glass.path, length);
        points[line].left = {
          x: right.x - diameter(length),
          y: right.y
        };
      }
      return points;
    };

    WGlass.prototype._compute_lengths_at_heigth = function() {
      var height, height_in_pixels, length, lengths, max_length;
      lengths = [];
      length = 0;
      max_length = Raphael.getTotalLength(this.glass.path);
      height = this.glass.height_in_mm * Glass.TENTH_OF_MM;
      while (height > 0) {
        height_in_pixels = this.glass.foot.y - ((height * this.glass.unit) / Glass.TENTH_OF_MM);
        while (length < max_length && Raphael.getPointAtLength(this.glass.path, length).y < height_in_pixels) {
          length++;
        }
        lengths[height] = length;
        height--;
      }
      lengths[0] = this.points.foot.length;
      return lengths;
    };

    WGlass.prototype._length_at_y = function(path, y, start) {
      var length, max_length;
      if (start == null) {
        start = 0;
      }
      /*
        Find the length on the path the path hat intersects the horizontal line at y
      */

      length = start;
      max_length = Raphael.getTotalLength(path);
      while (length < max_length && Raphael.getPointAtLength(path, length).y < y) {
        length++;
      }
      return length;
    };

    WGlass.prototype._mirror_path_vertically = function(path, x_line) {
      /*
      */

      var cp1x, cp1y, cp2x, cp2y, cpath, cpathsegs, mirror, mirror_x, mirrorlist, segment, x, y, _i, _len, _ref, _ref1, _ref2, _ref3;
      mirror_x = function(x) {
        return x_line - Math.abs(x_line - x);
      };
      cpath = Raphael.path2curve(path);
      cpathsegs = Raphael.parsePathString(cpath);
      mirror = "";
      mirrorlist = [];
      _ref = cpathsegs[0].slice(1, 3), x = _ref[0], y = _ref[1];
      _ref1 = cpathsegs.slice(1, +cpathsegs.length + 1 || 9e9);
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        segment = _ref1[_i];
        _ref2 = segment.slice(1, 5), cp1x = _ref2[0], cp1y = _ref2[1], cp2x = _ref2[2], cp2y = _ref2[3];
        mirrorlist.push([mirror_x(cp2x), cp2y, mirror_x(cp1x), cp1y, mirror_x(x), y]);
        _ref3 = segment.slice(5, 7), x = _ref3[0], y = _ref3[1];
      }
      mirror = ((function() {
        var _j, _len1, _ref4, _results;
        _ref4 = mirrorlist.reverse();
        _results = [];
        for (_j = 0, _len1 = _ref4.length; _j < _len1; _j++) {
          segment = _ref4[_j];
          _results.push('C' + segment.join(","));
        }
        return _results;
      })()).join("");
      return mirror;
    };

    return WGlass;

  })(Widget);

  module.exports = WGlass;

}).call(this);

/*
//@ sourceMappingURL=wglass.map
*/

},{"../widget":4,"./glass":2,"./measure_line":5,"./wmeasure_line":6}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
/*

(c) 2012, Huub de Beer, H.T.de.Beer@gmail.com
*/


(function() {
  var Widget;

  Widget = (function() {
    function Widget(canvas, x, y, spec) {
      this.canvas = canvas;
      this.x = x;
      this.y = y;
      this.spec = spec != null ? spec : {};
      this.widgets = this.canvas.set();
      this.dx = this.dy = 0;
    }

    Widget.prototype.place_at = function(x, y) {
      /*
      Place this widget at co-ordinates x an y
      */

      this._compute_geometry();
      this.dx = x - this.geometry.left;
      this.dy = y - this.geometry.top;
      this.widgets.transform("...t" + this.dx + "," + this.dy);
      this.x = x;
      this.y = y;
      this._compute_geometry();
      return this;
    };

    Widget.prototype._draw = function() {
      /*
      Draw this widget. Virtual method to be overloaded by all subclasses of 
      Widget. All shapes drawn are added to the list of widgets
      */

    };

    Widget.prototype._compute_geometry = function() {
      /*
      Compute the left, top, bottom, right, width, height, and center of this 
      widget given its top-left corner (x, y). 
      
      This does not work with paths that do not start at (0,0)
      */

      var bbox;
      bbox = this.widgets.getBBox();
      this.geometry = {};
      this.geometry.width = bbox.width;
      this.geometry.height = bbox.height;
      this.geometry.top = bbox.y;
      this.geometry.left = bbox.x;
      this.geometry.right = bbox.x2;
      this.geometry.bottom = bbox.y2;
      return this.geometry.center = {
        x: (this.geometry.right - this.geometry.left) / 2 + this.geometry.left,
        y: (this.geometry.bottom - this.geometry.top) / 2 + this.geometry.top
      };
    };

    return Widget;

  })();

  module.exports = Widget;

}).call(this);

/*
//@ sourceMappingURL=widget.map
*/

},{}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
/*
 (c) 2012, Huub de Beer, H.T.de.Beer@gmail.com
*/


(function() {
  var MeasureLine;

  MeasureLine = (function() {
    MeasureLine.EPSILON = 0.01;

    MeasureLine.prototype.to_json = function() {
      var export_object;
      export_object = {
        volume: this.volume,
        height: this.height,
        initial_position: this.initial_position,
        position: {
          x: this.position.x,
          y: this.position.y
        },
        side: this.side,
        movable: this.movable,
        visible: this.visible
      };
      return JSON.stringify(export_object);
    };

    MeasureLine.prototype.from_json = function(mljson) {
      this.volume = mljson.volume;
      this.height = mljson.height;
      this.initial_position = mljson.initial_position;
      this.position = mljson.position;
      this.side = mljson.side;
      this.movable = mljson.movable;
      return this.visible = mljson.visible;
    };

    function MeasureLine(volume, height, glass, initial_position, side, visible, movable) {
      this.volume = volume;
      this.height = height;
      this.glass = glass;
      this.initial_position = initial_position != null ? initial_position : {
        x: -1,
        y: -1
      };
      this.side = side != null ? side : 'right';
      this.visible = visible != null ? visible : false;
      this.movable = movable != null ? movable : true;
      this.set_position(this.initial_position);
    }

    MeasureLine.prototype.reset = function() {
      /*
      */

      return this.set_position(this.initial_position);
    };

    MeasureLine.prototype.hide = function() {
      return this.visible = false;
    };

    MeasureLine.prototype.show = function() {
      return this.visible = true;
    };

    MeasureLine.prototype.set_position = function(position) {
      /*
      Set the position of this measure line. Position is a point (x, y). Subsequently the height in mm can be computed.
      */

      this.position = position;
      return this.height = (this.glass.foot.y - this.position.y) / this.glass.unit;
    };

    MeasureLine.prototype.is_correct = function() {
      /*
      Is this measure line on the correct height on the glass? That is: is the error smaller than epsilon?
      */

      return Math.abs(this.error) <= MeasureLine.EPSILON;
    };

    MeasureLine.prototype.error = function() {
      /*
      The distance of this measure line to the correct position in mm. A negative error means it is too hight, a positive distance that it is too low
      */

      return (this.glass.height_at_volume(this.volume)) - this.height;
    };

    return MeasureLine;

  })();

  module.exports = MeasureLine;

}).call(this);

/*
//@ sourceMappingURL=measure_line.map
*/

},{}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
/*
(c) 2012, Huub de Beer, H.T.de.Beer@gmail.com
*/


(function() {
  var MeasureLine, WMeasureLine, Widget,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Widget = require('../widget');

  MeasureLine = require('./measure_line');

  WMeasureLine = (function(_super) {
    __extends(WMeasureLine, _super);

    function WMeasureLine(canvas, x, y, ml, foot, spec) {
      var _this = this;
      this.canvas = canvas;
      this.x = x;
      this.y = y;
      this.ml = ml;
      this.foot = foot;
      this.spec = spec != null ? spec : {};
      this.end = __bind(this.end, this);
      this.start = __bind(this.start, this);
      this.drag = __bind(this.drag, this);
      WMeasureLine.__super__.constructor.call(this, this.canvas, this.x, this.y, this.spec);
      this._draw();
      if (this.ml.movable) {
        this.widgets.mouseover(function(e) {
          return _this.border.attr({
            fill: 'gold',
            'fill-opacity': 0.25,
            'stroke-opacity': 0.75,
            cursor: 'move'
          });
        });
        this.widgets.mouseout(function(e) {
          return _this.border.attr({
            'stroke-opacity': 0,
            cursor: 'default',
            fill: 'white',
            'fill-opacity': 0
          });
        });
        this.widgets.drag(this.drag, this.start, this.end);
      }
    }

    WMeasureLine.prototype.drag = function(dx, dy, x, y, e) {
      var tx, ty;
      tx = Math.floor(dx - this.dpo.x);
      ty = Math.floor(dy - this.dpo.y);
      this.x += tx;
      this.y += ty;
      this.widgets.transform("...t" + tx + "," + ty);
      this.dpo = {
        x: dx,
        y: dy
      };
      this._compute_geometry();
      this.ml.position.x = this.x;
      this.ml.position.y = this.y;
      return this.ml.glass.change_measure_line(this.ml.volume, (this.foot - this.y) / this.ml.glass.unit);
    };

    WMeasureLine.prototype.show = function() {
      return this.widgets.show();
    };

    WMeasureLine.prototype.hide = function() {
      return this.widgets.hide();
    };

    WMeasureLine.prototype.start = function() {
      var _ref;
      this.dpo = (_ref = this.dpo) != null ? _ref : {};
      this.dpo = {
        x: 0,
        y: 0
      };
      return this.border.attr({
        'fill': 'gold',
        'fill-opacity': 0.05
      });
    };

    WMeasureLine.prototype.end = function() {
      return this.border.attr({
        'fill': 'white',
        'fill-opacity': 0
      });
    };

    WMeasureLine.prototype._draw = function() {
      var BENDINESS, LABELSKIP, TICKWIDTH, bbox, label, labelleft, tick, tickpath, _ref, _ref1, _ref2, _ref3, _ref4;
      TICKWIDTH = (_ref = this.spec['thickwidth']) != null ? _ref : 10;
      LABELSKIP = (_ref1 = this.spec['labelskip']) != null ? _ref1 : 5;
      BENDINESS = 6;
      this.bend = (_ref2 = this.spec.bend) != null ? _ref2 : false;
      switch (this.ml.side) {
        case 'right':
          if (this.bend) {
            tickpath = "M" + this.ml.position.x + "," + this.ml.position.y + "c0," + 2 + ",-" + BENDINESS + "," + BENDINESS + ",-" + TICKWIDTH + "," + BENDINESS;
          } else {
            tickpath = "M" + this.ml.position.x + "," + this.ml.position.y + "h-" + TICKWIDTH;
          }
          tick = this.canvas.path(tickpath);
          label = this.canvas.text(0, 0, "" + this.ml.volume + " ml");
          label.attr({
            'font-family': (_ref3 = this.spec['font-family']) != null ? _ref3 : 'sans-serif',
            'font-size': (_ref4 = this.spec['font-size']) != null ? _ref4 : 12,
            'text-anchor': 'start'
          });
          bbox = label.getBBox();
          labelleft = this.ml.position.x - LABELSKIP - bbox.width - TICKWIDTH;
          if (this.bend) {
            label.attr({
              x: labelleft,
              y: this.ml.position.y + BENDINESS
            });
          } else {
            label.attr({
              x: labelleft,
              y: this.ml.position.y
            });
          }
          bbox = label.getBBox();
          this.border = this.canvas.rect(bbox.x, bbox.y, bbox.width + TICKWIDTH, bbox.height);
          this.border.attr({
            stroke: 'black',
            fill: 'white',
            'fill-opacity': 0,
            'stroke-opacity': 0,
            'stroke-dasharray': '. '
          });
          break;
        case 'left':
          tickpath = "M" + this.ml.position.x + "," + this.ml.position.y + "h" + TICKWIDTH;
      }
      this.widgets.push(tick, label, this.border);
      bbox = this.widgets.getBBox();
      this.width = bbox.width;
      return this.height = bbox.height;
    };

    return WMeasureLine;

  })(Widget);

  module.exports = WMeasureLine;

}).call(this);

/*
//@ sourceMappingURL=wmeasure_line.map
*/

},{"../widget":4,"./measure_line":5}]},{},[1])
//@ sourceMappingURL=data:application/json;base64,
;